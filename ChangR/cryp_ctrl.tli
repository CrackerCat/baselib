// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (baed94cd).
//
// d:\workspace\fpzs2016\进销项演示\src\inmanager\debug\cryp_ctrl.tli
//
// Wrapper implementations for Win32 type library d:\\Cryp_Ctrl.ocx
// compiler-generated file created 01/12/18 at 09:18:33 - DO NOT EDIT!

#pragma once

//
// interface _CryptCtl wrapper method implementations
//

inline _bstr_t _CryptCtl::GetstrResult ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_strResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _CryptCtl::PutstrResult ( _bstr_t strResult ) {
    HRESULT _hr = put_strResult(strResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _CryptCtl::GetlenResult ( ) {
    long _result = 0;
    HRESULT _hr = get_lenResult(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _CryptCtl::PutlenResult ( long lenResult ) {
    HRESULT _hr = put_lenResult(lenResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long _CryptCtl::GetErrCode ( ) {
    long _result = 0;
    HRESULT _hr = get_ErrCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _CryptCtl::PutErrCode ( long ErrCode ) {
    HRESULT _hr = put_ErrCode(ErrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t _CryptCtl::GetErrMsg ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrMsg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _CryptCtl::PutErrMsg ( _bstr_t ErrMsg ) {
    HRESULT _hr = put_ErrMsg(ErrMsg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _CryptCtl::OpenDeviceEx ( _bstr_t Passwd ) {
    HRESULT _hr = raw_OpenDeviceEx(Passwd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::OpenDevice ( _bstr_t strProvider, _bstr_t strContainer, long nProvType, _bstr_t Passwd ) {
    HRESULT _hr = raw_OpenDevice(strProvider, strContainer, nProvType, Passwd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::CloseDevice ( ) {
    HRESULT _hr = raw_CloseDevice();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _CryptCtl::IsDeviceOpened ( ) {
    long _result = 0;
    HRESULT _hr = raw_IsDeviceOpened(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _CryptCtl::GetDeviceStatus ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDeviceStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _CryptCtl::SetPin ( _bstr_t strPwd ) {
    HRESULT _hr = raw_SetPin(strPwd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::GetPin ( ) {
    HRESULT _hr = raw_GetPin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::ClearPin ( ) {
    HRESULT _hr = raw_ClearPin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::SetPwd ( _bstr_t strPwd ) {
    HRESULT _hr = raw_SetPwd(strPwd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::GetPwd ( ) {
    HRESULT _hr = raw_GetPwd();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::ClearPwd ( ) {
    HRESULT _hr = raw_ClearPwd();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::ReadCert ( long certNo, long dwFlags ) {
    HRESULT _hr = raw_ReadCert(certNo, dwFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::DigestData ( _bstr_t strData, long lenData, _bstr_t strAlgid, long flags ) {
    HRESULT _hr = raw_DigestData(strData, lenData, strAlgid, flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::Sign ( _bstr_t strData, long lenData, _bstr_t strSignAlgId, long flags ) {
    HRESULT _hr = raw_Sign(strData, lenData, strSignAlgId, flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::SignData ( _bstr_t strData, long lenData, _bstr_t strSignAlgId, _bstr_t strTime, long flags ) {
    HRESULT _hr = raw_SignData(strData, lenData, strSignAlgId, strTime, flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::SignFile ( _bstr_t strFileName, _bstr_t strSignAlgId, _bstr_t strTime, long flags ) {
    HRESULT _hr = raw_SignFile(strFileName, strSignAlgId, strTime, flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::Verify ( _bstr_t strSignedData, _bstr_t strSrcData, long lenSrcData, _bstr_t strSignerInfo, long flags, _bstr_t strSignAlgId ) {
    HRESULT _hr = raw_Verify(strSignedData, strSrcData, lenSrcData, strSignerInfo, flags, strSignAlgId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::VerifySign ( _bstr_t strSignedData, _bstr_t strSrcData, long lenSrcData, _bstr_t strCert ) {
    HRESULT _hr = raw_VerifySign(strSignedData, strSrcData, lenSrcData, strCert);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::VerifySignFile ( _bstr_t strSignedData, const _variant_t & strFileName, _bstr_t strCert ) {
    HRESULT _hr = raw_VerifySignFile(strSignedData, strFileName, strCert);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::SignedDataAttach ( _bstr_t strSrcData, long lenSrcData, _bstr_t strSignedData ) {
    HRESULT _hr = raw_SignedDataAttach(strSrcData, lenSrcData, strSignedData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::SignedDataDetach ( _bstr_t strSignedData, long dwFlags ) {
    HRESULT _hr = raw_SignedDataDetach(strSignedData, dwFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::GetSrcData ( _bstr_t strSignedData ) {
    HRESULT _hr = raw_GetSrcData(strSignedData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::EnvelopData ( _bstr_t strRecipientInfo, _bstr_t strData, long lenData, _bstr_t strEncAlgid, _bstr_t strSignAlgId, long flags ) {
    HRESULT _hr = raw_EnvelopData(strRecipientInfo, strData, lenData, strEncAlgid, strSignAlgId, flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::UnenvelopData ( _bstr_t strEnvelopedData, _bstr_t strSignerCert ) {
    HRESULT _hr = raw_UnenvelopData(strEnvelopedData, strSignerCert);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::ClientHello ( long dwFlags ) {
    HRESULT _hr = raw_ClientHello(dwFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _CryptCtl::ServerHello ( _bstr_t strClientHello ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ServerHello(strClientHello, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT _CryptCtl::ClientAuth ( _bstr_t strServerHello ) {
    HRESULT _hr = raw_ClientAuth(strServerHello);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::ServerAuth ( _bstr_t strClientAuth, _bstr_t strServerRandom ) {
    HRESULT _hr = raw_ServerAuth(strClientAuth, strServerRandom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::PublicEncrypt ( _bstr_t strData, long lenData, _bstr_t strEncAlgid, long dwKeySpec, _bstr_t strKeyInfo ) {
    HRESULT _hr = raw_PublicEncrypt(strData, lenData, strEncAlgid, dwKeySpec, strKeyInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::PrivateDecrypt ( _bstr_t strEncedData, _bstr_t strEncAlgid, long dwKeySpec ) {
    HRESULT _hr = raw_PrivateDecrypt(strEncedData, strEncAlgid, dwKeySpec);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::PrivateDecrypt2 ( _bstr_t strEncedData, long dwEncDataLen ) {
    HRESULT _hr = raw_PrivateDecrypt2(strEncedData, dwEncDataLen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::VerifyPin ( _bstr_t Passwd ) {
    HRESULT _hr = raw_VerifyPin(Passwd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::VerifyPinEx ( ) {
    HRESULT _hr = raw_VerifyPinEx();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::ChangePin ( _bstr_t Passwd, _bstr_t newPasswd ) {
    HRESULT _hr = raw_ChangePin(Passwd, newPasswd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::ChangePinEx ( ) {
    HRESULT _hr = raw_ChangePinEx();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::GetUserInfo ( ) {
    HRESULT _hr = raw_GetUserInfo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::CheckKey ( ) {
    HRESULT _hr = raw_CheckKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::CheckKey2 ( ) {
    HRESULT _hr = raw_CheckKey2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _CryptCtl::GetReaderList ( long cDivided, long bPresent ) {
    long _result = 0;
    HRESULT _hr = raw_GetReaderList(cDivided, bPresent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _CryptCtl::GetCertData ( long index, _bstr_t strCert ) {
    HRESULT _hr = raw_GetCertData(index, strCert);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::GetDeviceID ( ) {
    HRESULT _hr = raw_GetDeviceID();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::GetCertSerNum ( ) {
    HRESULT _hr = raw_GetCertSerNum();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _CryptCtl::GetCertInfo ( _bstr_t strCert, long certInfoNo ) {
    HRESULT _hr = raw_GetCertInfo(strCert, certInfoNo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
